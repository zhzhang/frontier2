/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "ADMIN" | "MEMBER" | "NONE" | "REVIEWER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  Upload: any
}

export interface NexusGenObjects {
  Article: { // root type
    id?: string | null; // String
    title?: string | null; // String
  }
  ArticleVersion: { // root type
    abstract?: string | null; // String
    createdAt?: string | null; // String
    id?: string | null; // String
    ref?: string | null; // String
  }
  Mutation: {};
  Organization: { // root type
    description?: string | null; // String
    id?: string | null; // String
    logoRef?: string | null; // String
    name?: string | null; // String
  }
  Query: {};
  Review: { // root type
    author?: NexusGenRootTypes['User'] | null; // User
    body?: string | null; // String
    id?: string | null; // String
    published?: boolean | null; // Boolean
    rating?: number | null; // Int
    reviewNumber?: number | null; // Int
    submission?: NexusGenRootTypes['Submission'] | null; // Submission
  }
  Submission: { // root type
    articleId?: string | null; // String
    id?: string | null; // String
    venue?: NexusGenRootTypes['Venue'] | null; // Venue
    venueId?: string | null; // String
  }
  User: { // root type
    email?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
  }
  Venue: { // root type
    description?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
    role?: string | null; // String
    submissionDeadline?: NexusGenScalars['Date'] | null; // Date
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Article: { // field return type
    authors: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    id: string | null; // String
    reviews: Array<NexusGenRootTypes['Review'] | null> | null; // [Review]
    title: string | null; // String
    versions: Array<NexusGenRootTypes['ArticleVersion'] | null> | null; // [ArticleVersion]
  }
  ArticleVersion: { // field return type
    abstract: string | null; // String
    createdAt: string | null; // String
    id: string | null; // String
    ref: string | null; // String
  }
  Mutation: { // field return type
    assignChair: NexusGenRootTypes['Submission'] | null; // Submission
    assignReviewers: NexusGenRootTypes['Submission'] | null; // Submission
    createArticle: NexusGenRootTypes['Article'] | null; // Article
    createOrganization: NexusGenRootTypes['Organization'] | null; // Organization
    createReview: NexusGenRootTypes['Review'] | null; // Review
    createVenue: NexusGenRootTypes['Venue'] | null; // Venue
    updateReview: NexusGenRootTypes['Review'] | null; // Review
  }
  Organization: { // field return type
    description: string | null; // String
    id: string | null; // String
    logoRef: string | null; // String
    name: string | null; // String
    role: NexusGenEnums['Role'] | null; // Role
    venues: Array<NexusGenRootTypes['Venue'] | null> | null; // [Venue]
  }
  Query: { // field return type
    article: NexusGenRootTypes['Article'] | null; // Article
    articles: Array<NexusGenRootTypes['Article'] | null> | null; // [Article]
    browseOrganizations: Array<NexusGenRootTypes['Organization'] | null> | null; // [Organization]
    organization: NexusGenRootTypes['Organization'] | null; // Organization
    reviewerAssignedSubmissions: Array<NexusGenRootTypes['Submission'] | null> | null; // [Submission]
    searchUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    user: NexusGenRootTypes['User'] | null; // User
    venue: NexusGenRootTypes['Venue'] | null; // Venue
    venueSubmissions: Array<NexusGenRootTypes['Submission'] | null> | null; // [Submission]
  }
  Review: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    body: string | null; // String
    id: string | null; // String
    published: boolean | null; // Boolean
    rating: number | null; // Int
    reviewNumber: number | null; // Int
    submission: NexusGenRootTypes['Submission'] | null; // Submission
  }
  Submission: { // field return type
    article: NexusGenRootTypes['Article'] | null; // Article
    articleId: string | null; // String
    chair: NexusGenRootTypes['User'] | null; // User
    id: string | null; // String
    requestedReviewers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    venue: NexusGenRootTypes['Venue'] | null; // Venue
    venueId: string | null; // String
  }
  User: { // field return type
    articles: Array<NexusGenRootTypes['Article'] | null> | null; // [Article]
    email: string | null; // String
    id: string | null; // String
    name: string | null; // String
  }
  Venue: { // field return type
    description: string | null; // String
    id: string | null; // String
    name: string | null; // String
    role: string | null; // String
    submissionDeadline: NexusGenScalars['Date'] | null; // Date
  }
}

export interface NexusGenFieldTypeNames {
  Article: { // field return type name
    authors: 'User'
    id: 'String'
    reviews: 'Review'
    title: 'String'
    versions: 'ArticleVersion'
  }
  ArticleVersion: { // field return type name
    abstract: 'String'
    createdAt: 'String'
    id: 'String'
    ref: 'String'
  }
  Mutation: { // field return type name
    assignChair: 'Submission'
    assignReviewers: 'Submission'
    createArticle: 'Article'
    createOrganization: 'Organization'
    createReview: 'Review'
    createVenue: 'Venue'
    updateReview: 'Review'
  }
  Organization: { // field return type name
    description: 'String'
    id: 'String'
    logoRef: 'String'
    name: 'String'
    role: 'Role'
    venues: 'Venue'
  }
  Query: { // field return type name
    article: 'Article'
    articles: 'Article'
    browseOrganizations: 'Organization'
    organization: 'Organization'
    reviewerAssignedSubmissions: 'Submission'
    searchUsers: 'User'
    user: 'User'
    venue: 'Venue'
    venueSubmissions: 'Submission'
  }
  Review: { // field return type name
    author: 'User'
    body: 'String'
    id: 'String'
    published: 'Boolean'
    rating: 'Int'
    reviewNumber: 'Int'
    submission: 'Submission'
  }
  Submission: { // field return type name
    article: 'Article'
    articleId: 'String'
    chair: 'User'
    id: 'String'
    requestedReviewers: 'User'
    venue: 'Venue'
    venueId: 'String'
  }
  User: { // field return type name
    articles: 'Article'
    email: 'String'
    id: 'String'
    name: 'String'
  }
  Venue: { // field return type name
    description: 'String'
    id: 'String'
    name: 'String'
    role: 'String'
    submissionDeadline: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    assignChair: { // args
      chairId: string; // String!
      submissionId: string; // String!
    }
    assignReviewers: { // args
      reviewerIds: string[]; // [String!]!
      submissionId: string; // String!
    }
    createArticle: { // args
      abstract: string; // String!
      authorIds: string[]; // [String!]!
      ref: string; // String!
      title: string; // String!
      venueId?: string | null; // String
    }
    createOrganization: { // args
      description: string; // String!
      logoRef?: string | null; // String
      name: string; // String!
    }
    createReview: { // args
      articleId: string; // String!
      submissionId?: string | null; // String
    }
    createVenue: { // args
      description: string; // String!
      name: string; // String!
      organizationId: string; // String!
      submissionDeadline: NexusGenScalars['Date']; // Date!
    }
    updateReview: { // args
      body: string; // String!
      id: string; // String!
      published: boolean; // Boolean!
      rating: number; // Int!
    }
  }
  Query: {
    article: { // args
      id: string; // String!
    }
    browseOrganizations: { // args
      tags?: Array<string | null> | null; // [String]
    }
    organization: { // args
      id: string; // String!
    }
    searchUsers: { // args
      query?: string | null; // String
    }
    user: { // args
      userId: string; // String!
    }
    venue: { // args
      id: string; // String!
    }
    venueSubmissions: { // args
      venueId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}