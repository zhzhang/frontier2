### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddRelationInput {
  endDate: DateTime
  relation: String!
  targetId: String!
  userId: String!
}

type Article {
  abstract: String
  acceptedVenues: [Venue]
  anonymous: Boolean
  authors: [User]
  id: String
  latestVersion: ArticleVersion!
  title: String
  versions: [ArticleVersion]!
}

type ArticleVersion {
  createdAt: DateTime
  id: String
  ref: String
  versionNumber: Int
}

input AssignSubmissionInput {
  ownerId: String!
  rootId: String!
}

input ChairRequestReviewInput {
  parentRequestId: String!
  userId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeclineReviewRequestInput {
  id: String!
  note: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addRelation(input: AddRelationInput): Relation
  assignSubmissionOwner(input: AssignSubmissionInput!): ReviewRequest
  chairRequestReview(input: ChairRequestReviewInput!): ReviewRequest
  createArticle(abstract: String!, anonymous: Boolean!, authorIds: [String!]!, ref: String!, title: String!, venueId: String): Article
  createThreadMessage(input: ThreadMessageCreateInput!): ThreadMessage
  createVenue(input: VenueCreateInput): Venue
  createVenueMemberships(input: VenueMembershipsCreateInput): [VenueMembership]
  declineReviewRequest(input: DeclineReviewRequestInput!): ReviewRequest
  deleteRelation(id: String): Relation
  deleteThreadMessage(id: String): ThreadMessage
  deleteVenueMembership(id: String): VenueMembership
  publishMessage(body: String!, highlights: JSON!, id: String!): ThreadMessage
  updateThreadMessage(input: ThreadMessageUpdateInput!): ThreadMessage
  updateUser(input: UserUpdateInput): User
  updateVenue(input: VenueUpdateInput): Venue
}

type Query {
  article(id: String): Article
  draftMessage(articleId: String, headId: String): ThreadMessage
  feedArticles: [Article]
  searchEditors(organizationId: String!, query: String): [User]
  searchOpenVenues(query: String): [Venue]
  searchReviewers(input: SearchReviewersInput): [User]
  searchUsers(query: String): [User]
  submissionOwnerCandidates(venueId: String): [User]
  threadMessages(input: ThreadMessagesInput): [ThreadMessage]
  user(id: String): User
  userArticles(input: UserArticlesInput): [Article]
  userRelations(userId: String): [Relation]
  userRequests(userId: String): [ReviewRequest]
  userReviews(input: UserReviewsInput): [ThreadMessage]
  venue(id: String): Venue
  venueArticles(input: VenueArticlesInput): [Article]
  venueMemberships(input: VenueMembershipsInput): [VenueMembership]
  venueReviewRequests(input: VenueReviewRequestsInput): [ReviewRequest]
  venues: [Venue]
}

type Relation {
  endDate: DateTime
  id: String
  relation: String
  target: User
}

enum RelationType {
  ADVISEE
  ADVISOR
  COAUTHOR
  COWORKER
  FAMILY
  SOCIAL
}

type ReviewRequest {
  article: Article
  chairRequest: ReviewRequest
  createdAt: DateTime
  id: String
  note: String
  status: String
  type: String
  user: User
  venue: Venue
}

enum Role {
  ACTION_EDITOR
  ADMIN
  NONE
}

input SearchReviewersInput {
  articleId: String!
  query: String!
}

enum TheadMessageType {
  COMMENT
  DECISION
  REVIEW
}

type ThreadMessage {
  article: Article
  author: User
  body: String
  decision: Boolean
  headId: String
  highlights: JSON
  id: String
  publishTimestamp: DateTime
  published: Boolean
  rating: Int
  released: Boolean
  type: TheadMessageType
  venue: Venue
}

input ThreadMessageCreateInput {
  articleId: String!
  headId: String
  reviewRequestId: String
  type: TheadMessageType!
  venueId: String
}

input ThreadMessageUpdateInput {
  body: String
  decision: Boolean
  highlights: JSON
  id: String!
}

input ThreadMessagesInput {
  after: String
  articleId: String!
  headId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  email: String
  id: String
  institution: String
  name: String
  profilePictureUrl: String
  twitter: String
  website: String
}

input UserArticlesInput {
  after: String
  limit: Int
  userId: String!
}

input UserReviewsInput {
  after: String
  limit: Int
  userId: String!
}

input UserUpdateInput {
  id: String!
  institution: String
  name: String
  profilePictureRef: String
  twitter: String
  website: String
}

type Venue {
  abbreviation: String
  acceptingSubmissions: Boolean
  description: String
  id: String
  logoRef: String
  name: String
  ratingFields: JSON
  reviewTemplate: String
  role: Role
  submissionDeadline: DateTime
  venueDate: DateTime
  websiteUrl: String
}

input VenueArticlesInput {
  after: String
  headId: String
  venueId: String!
}

input VenueCreateInput {
  abbreviation: String
  name: String!
  venueDate: DateTime
}

type VenueMembership {
  id: String
  role: String
  user: User
  venue: Venue
}

input VenueMembershipsCreateInput {
  role: String!
  userIds: [String]!
  venueId: String!
}

input VenueMembershipsInput {
  after: String
  headId: String
  role: String!
  venueId: String!
}

input VenueReviewRequestsInput {
  after: String
  headId: String
  venueId: String!
}

input VenueUpdateInput {
  abbreviation: String
  acceptingSubmissions: Boolean
  description: String
  name: String
  reviewTemplate: String
  submissionDeadline: DateTime
  venueDate: DateTime
  venueId: String!
}
