generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                      String                   @id
  email                   String                   @unique
  name                    String
  profilePictureUrl       String?
  reviews                 Review[]
  organizationMemberships OrganizationMembership[]
  decisions               Decision[]               @relation("chair")
  threadMessage           ThreadMessage[]
  authorships             ArticleAuthor[]
  chairSubmissions        Submission[]
  relations               Relation[]
}

enum RelationType {
  ADVISOR
  ADVISEE
  COAUTHOR
  COWORKER
  FAMILY
  SOCIAL
}

model Relation {
  id       String       @id
  target   User         @relation(fields: [userId], references: [id])
  relation RelationType
  comment  String
  userId   String
  targetId String
}

model Article {
  id          String           @id @default(cuid())
  title       String           @unique
  authors     ArticleAuthor[]
  reviews     Review[]
  versions    ArticleVersion[]
  decisions   Decision[]
  submissions Submission[]
  anonymous   Boolean          @default(true)
}

model ArticleAuthor {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id])
  authorNumber Int
  userId       String
  article      Article @relation(fields: [articleId], references: [id])
  articleId    String
}

model ArticleVersion {
  id            String   @id @default(cuid())
  abstract      String   @db.MediumText
  ref           String?
  article       Article  @relation(fields: [articleId], references: [id])
  articleId     String
  versionNumber Int
  createdAt     DateTime @default(now())
}

model ThreadMessage {
  id         String   @id @default(cuid())
  body       String   @db.MediumText
  reviewId   String
  userId     String
  review     Review   @relation(fields: [reviewId], references: [id])
  author     User     @relation(fields: [userId], references: [id])
  highlights String   @db.MediumText
  createdAt  DateTime @default(now())
}

model Submission {
  id             String       @id @default(cuid())
  article        Article      @relation(fields: [articleId], references: [id])
  articleId      String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  owner          User?        @relation(fields: [ownerId], references: [id])
  ownerId        String?
  decision       Decision?    @relation(fields: [decisionId], references: [id])
  decisionId     String?
  createdAt      DateTime     @default(now())
}

model Organization {
  id           String                   @id @default(cuid())
  name         String
  description  String                   @db.MediumText
  abbreviation String?
  logoRef      String?
  memberships  OrganizationMembership[]
  reviews      Review[]
  decisions    Decision[]
  submissions  Submission[]
  venues       Venue[]
}

model OrganizationMembership {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           String
  userId         String
  organizationId String
}

model Venue {
  id             String       @id @default(cuid())
  name           String
  abbreviation   String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  date           DateTime
}

model Review {
  id             String          @id @default(cuid())
  body           String          @db.MediumText
  rating         Int             @default(0)
  article        Article         @relation(fields: [articleId], references: [id])
  author         User            @relation(fields: [authorId], references: [id])
  highlights     String          @db.MediumText
  articleId      String
  authorId       String
  organization   Organization?   @relation(fields: [organizationId], references: [id])
  organizationId String?
  reviewNumber   Int
  published      Boolean         @default(false)
  canAccess      Boolean         @default(true)
  threadMessages ThreadMessage[]
  decisions      Decision[]
}

model Decision {
  id             String        @id @default(cuid())
  body           String        @db.MediumText
  decision       Boolean       @default(false)
  highlights     String        @db.MediumText
  citedReviews   Review[]
  article        Article       @relation(fields: [articleId], references: [id])
  articleId      String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  author         User          @relation("chair", fields: [authorId], references: [id])
  authorId       String
  submission     Submission?
  published      Boolean       @default(false)
}
