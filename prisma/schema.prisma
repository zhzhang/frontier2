generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                String            @id
  email             String            @unique
  name              String
  twitter           String?           @unique
  website           String?           @unique
  profilePictureUrl String?           @unique
  institution       String?
  reviews           Review[]
  venueMemberships  VenueMembership[]
  decisions         Decision[]        @relation("chair")
  threadMessage     ThreadMessage[]
  authorships       Authorship[]
  chairSubmissions  Submission[]
  relations         Relation[]
  relationsAsTarget Relation[]        @relation("target")
  reviewRequests    ReviewRequest[]
}

enum RelationType {
  ADVISOR
  ADVISEE
  COAUTHOR
  COWORKER
  FAMILY
  SOCIAL
}

model Relation {
  id       String       @id
  user     User         @relation(fields: [userId], references: [id])
  target   User         @relation(name: "target", fields: [targetId], references: [id])
  relation RelationType
  endYear  String
  userId   String
  targetId String
}

model Article {
  id            String           @id @default(cuid())
  title         String
  authors       Authorship[]
  reviews       Review[]
  versions      ArticleVersion[]
  decisions     Decision[]
  submissions   Submission[]
  anonymous     Boolean          @default(true)
  reviewRequest ReviewRequest[]
}

model Authorship {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id])
  authorNumber Int
  userId       String
  article      Article @relation(fields: [articleId], references: [id])
  articleId    String
}

model ArticleVersion {
  id            String   @id @default(cuid())
  abstract      String   @db.MediumText
  ref           String?
  article       Article  @relation(fields: [articleId], references: [id])
  articleId     String
  versionNumber Int
  createdAt     DateTime @default(now())
}

model ThreadMessage {
  id         String   @id @default(cuid())
  body       String   @db.MediumText
  articleId  String
  headId     String?
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  highlights Json
  createdAt  DateTime @default(now())
  published  Boolean  @default(false)
}

model Submission {
  id             String          @id @default(cuid())
  article        Article         @relation(fields: [articleId], references: [id])
  articleId      String
  venue          Venue           @relation(fields: [venueId], references: [id])
  venueId        String
  owner          User?           @relation(fields: [ownerId], references: [id])
  ownerId        String?
  decision       Decision?       @relation(fields: [decisionId], references: [id])
  decisionId     String?         @unique
  createdAt      DateTime        @default(now())
  reviewRequests ReviewRequest[]
}

model Venue {
  id                 String            @id @default(cuid())
  name               String
  websiteUrl         String?
  abbreviation       String?
  description        String            @db.MediumText
  logoRef            String?
  venueDate          DateTime?
  submissionOpen     DateTime?
  submissionDeadline DateTime?
  memberships        VenueMembership[]
  decisions          Decision[]
  submissions        Submission[]
}

model VenueMembership {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  venue   Venue  @relation(fields: [venueId], references: [id])
  role    String
  userId  String
  venueId String
}

model Review {
  id               String    @id @default(cuid())
  body             String    @db.MediumText
  rating           Int       @default(0)
  article          Article   @relation(fields: [articleId], references: [id])
  author           User      @relation(fields: [authorId], references: [id])
  highlights       Json
  articleId        String
  authorId         String
  publishTimestamp DateTime?
  published        Boolean   @default(false)
  anonymized       Boolean   @default(true)
}

model ReviewRequest {
  id           String      @id @default(cuid())
  articleId    String
  article      Article     @relation(fields: [articleId], references: [id])
  submission   Submission? @relation(fields: [submissionId], references: [id])
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  status       String
  submissionId String?
}

model Decision {
  id         String      @id @default(cuid())
  body       String      @db.MediumText
  decision   Boolean     @default(false)
  highlights Json
  article    Article     @relation(fields: [articleId], references: [id])
  articleId  String
  venue      Venue       @relation(fields: [venueId], references: [id])
  venueId    String
  author     User        @relation("chair", fields: [authorId], references: [id])
  authorId   String
  submission Submission?
  published  Boolean     @default(false)
}
