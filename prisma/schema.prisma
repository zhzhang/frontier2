generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                String            @id
  email             String            @unique
  name              String
  bio               String            @default("")
  profilePictureUrl String?
  reviews           Review[]
  venueMemberships  VenueMembership[]
  decisions         Decision[]        @relation("chair")
  threadMessage     ThreadMessage[]
  authorships       Authorship[]
  chairSubmissions  Submission[]
  relations         Relation[]
  relationsAsTarget Relation[]        @relation("target")
}

enum RelationType {
  ADVISOR
  ADVISEE
  COAUTHOR
  COWORKER
  FAMILY
  SOCIAL
}

model Relation {
  id       String       @id
  user     User         @relation(fields: [userId], references: [id])
  target   User         @relation(name: "target", fields: [targetId], references: [id])
  relation RelationType
  endYear  String
  userId   String
  targetId String
}

model Article {
  id          String           @id @default(cuid())
  title       String
  authors     Authorship[]
  reviews     Review[]
  versions    ArticleVersion[]
  decisions   Decision[]
  submissions Submission[]
  anonymous   Boolean          @default(true)
}

model Authorship {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id])
  authorNumber Int
  userId       String
  article      Article @relation(fields: [articleId], references: [id])
  articleId    String
}

model ArticleVersion {
  id            String   @id @default(cuid())
  abstract      String   @db.MediumText
  ref           String?
  article       Article  @relation(fields: [articleId], references: [id])
  articleId     String
  versionNumber Int
  createdAt     DateTime @default(now())
}

model ThreadMessage {
  id         String   @id @default(cuid())
  body       String   @db.MediumText
  headId     String
  userId     String
  author     User     @relation(fields: [userId], references: [id])
  highlights String   @db.MediumText
  createdAt  DateTime @default(now())
}

model Submission {
  id         String    @id @default(cuid())
  article    Article   @relation(fields: [articleId], references: [id])
  articleId  String
  venue      Venue     @relation(fields: [venueId], references: [id])
  venueId    String
  owner      User?     @relation(fields: [ownerId], references: [id])
  ownerId    String?
  decision   Decision? @relation(fields: [decisionId], references: [id])
  decisionId String?
  createdAt  DateTime  @default(now())
}

model Venue {
  id                 String            @id @default(cuid())
  name               String
  websiteUrl         String?
  abbreviation       String?
  description        String            @db.MediumText
  logoRef            String?
  venueDate          DateTime?
  submissionOpen     DateTime?
  submissionDeadline DateTime?
  memberships        VenueMembership[]
  reviews            Review[]
  decisions          Decision[]
  submissions        Submission[]
}

model VenueMembership {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  venue   Venue  @relation(fields: [venueId], references: [id])
  role    String
  userId  String
  venueId String
}

model Review {
  id           String     @id @default(cuid())
  body         String     @db.MediumText
  rating       Int        @default(0)
  article      Article    @relation(fields: [articleId], references: [id])
  author       User       @relation(fields: [authorId], references: [id])
  highlights   String     @db.MediumText
  articleId    String
  authorId     String
  venue        Venue?     @relation(fields: [venueId], references: [id])
  venueId      String?
  reviewNumber Int
  published    Boolean    @default(false)
  anonymized   Boolean    @default(true)
  decisions    Decision[]
}

model Decision {
  id           String      @id @default(cuid())
  body         String      @db.MediumText
  decision     Boolean     @default(false)
  highlights   String      @db.MediumText
  citedReviews Review[]
  article      Article     @relation(fields: [articleId], references: [id])
  articleId    String
  venue        Venue       @relation(fields: [venueId], references: [id])
  venueId      String
  author       User        @relation("chair", fields: [authorId], references: [id])
  authorId     String
  submission   Submission?
  published    Boolean     @default(false)
}
