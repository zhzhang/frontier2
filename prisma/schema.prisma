generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  email                   String                   @unique
  id                      String                   @id
  name                    String?
  articles                Article[]
  assignedSubmissions     Submission[]             @relation("chair")
  reviews                 Review[]
  reviewRequests          Submission[]
  venueMemberships        VenueMembership[]
  organizationMemberships OrganizationMembership[]
}

model Article {
  id          String           @id @default(cuid())
  title       String
  authors     User[]
  reviews     Review[]
  versions    ArticleVersion[]
  submissions Submission[]
}

model ArticleVersion {
  id        String   @id @default(cuid())
  abstract  String
  ref       String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())
}

model Organization {
  id          String                   @id @default(cuid())
  name        String
  description String?
  logoRef     String?
  venues      Venue[]
  memberships OrganizationMembership[]
}

model OrganizationMembership {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           String
  userId         String
  organizationId String
}

model Venue {
  id                 String            @id @default(cuid())
  name               String
  description        String?
  organization       Organization      @relation(fields: [organizationId], references: [id])
  organizationId     String
  submissionDeadline DateTime
  submissions        Submission[]
  memberships        VenueMembership[]
}

model VenueMembership {
  id      String @id @default(cuid())
  role    String
  userId  String
  venueId String
  user    User   @relation(fields: [userId], references: [id])
  venue   Venue  @relation(fields: [venueId], references: [id])
}

model Review {
  id             String  @id @default(cuid())
  body           String @default("")
  rating         Int @default(0)
  article        Article @relation(fields: [articleId], references: [id])
  author         User    @relation(fields: [authorId], references: [id])
  articleId      String
  submission     Submission? @relation(fields: [submissionId], references: [id])
  submissionId   String?
  authorId       String
  reviewNumber   Int
  published      Boolean @default(false)
}

model Submission {
  id                 String  @id @default(cuid())
  article            Article @relation(fields: [articleId], references: [id])
  articleId          String
  venue              Venue   @relation(fields: [venueId], references: [id])
  venueId            String
  chair              User?   @relation("chair", fields: [chairId], references: [id])
  chairId            String?
  requestedReviewers User[]
}
