generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                String            @id
  email             String            @unique
  name              String
  twitter           String?           @unique
  website           String?           @unique
  profilePictureUrl String?           @unique
  institution       String?
  venueMemberships  VenueMembership[]
  chairSubmissions  Submission[]
  relations         Relation[]
  relationsAsTarget Relation[]        @relation("target")
  reviewRequests    ReviewRequest[]
  identities        Identity[]
  threadMessage     ThreadMessage[]
}

enum RelationType {
  ADVISOR
  ADVISEE
  COAUTHOR
  COWORKER
  FAMILY
  SOCIAL
}

model Relation {
  id       String       @id
  user     User         @relation(fields: [userId], references: [id])
  target   User         @relation(name: "target", fields: [targetId], references: [id])
  relation RelationType
  endYear  String
  userId   String
  targetId String
}

model Article {
  id             String           @id @default(cuid())
  title          String
  abstract       String           @db.MediumText
  authors        Identity[]
  versions       ArticleVersion[]
  submissions    Submission[]
  anonymous      Boolean          @default(true)
  reviewRequest  ReviewRequest[]
  threadMessages ThreadMessage[]
}

enum IdentityContext {
  AUTHOR
  REVIEWER
  CHAIR
}

model Identity {
  id            String           @id @default(cuid())
  user          User             @relation(fields: [userId], references: [id])
  context       IdentityContext?
  venue         Venue?           @relation(fields: [venueId], references: [id])
  venueId       String?
  number        Int
  userId        String
  article       Article          @relation(fields: [articleId], references: [id])
  anonymized    Boolean          @default(true)
  articleId     String
  threadMessage ThreadMessage[]
}

model ArticleVersion {
  id            String   @id @default(cuid())
  ref           String?
  article       Article  @relation(fields: [articleId], references: [id])
  articleId     String
  versionNumber Int
  createdAt     DateTime @default(now())
}

enum ThreadMessageType {
  COMMENT
  REVIEW
  DECISION
}

model ThreadMessage {
  id               String            @id @default(cuid())
  type             ThreadMessageType
  body             String            @db.MediumText
  highlights       Json
  authorIdentity   Identity?         @relation(fields: [authorIdentityId], references: [id])
  authorIdentityId String?
  author           User              @relation(fields: [authorId], references: [id])
  authorId         String
  article          Article           @relation(fields: [articleId], references: [id])
  articleId        String
  headId           String?
  venue            Venue?            @relation(fields: [venueId], references: [id])
  venueId          String?
  rating           Json?
  decision         Boolean           @default(false)
  published        Boolean           @default(false)
  publishTimestamp DateTime?
  released         Boolean           @default(true)
}

model Submission {
  id             String          @id @default(cuid())
  article        Article         @relation(fields: [articleId], references: [id])
  articleId      String
  venue          Venue           @relation(fields: [venueId], references: [id])
  venueId        String
  owner          User?           @relation(fields: [ownerId], references: [id])
  ownerId        String?
  createdAt      DateTime        @default(now())
  reviewRequests ReviewRequest[]
}

enum ReviewPolicyType {
  OPEN
  SINGLE_BLIND
  DOUBLE_BLIND
}

model Venue {
  id                   String            @id @default(cuid())
  name                 String
  acceptingSubmissions Boolean           @default(false)
  reviewPolicy         ReviewPolicyType  @default(DOUBLE_BLIND)
  reviewTemplate       String?           @db.MediumText
  ratingFields         Json?
  websiteUrl           String?
  abbreviation         String?
  description          String?           @db.MediumText
  logoRef              String?
  venueDate            DateTime?
  submissionDeadline   DateTime?
  memberships          VenueMembership[]
  submissions          Submission[]
  threadMessage        ThreadMessage[]
  identities           Identity[]
}

model VenueMembership {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  venue   Venue  @relation(fields: [venueId], references: [id])
  role    String
  userId  String
  venueId String
}

model ReviewRequest {
  id           String      @id @default(cuid())
  articleId    String
  article      Article     @relation(fields: [articleId], references: [id])
  submission   Submission? @relation(fields: [submissionId], references: [id])
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  status       String
  submissionId String?
}
