{"ast":null,"code":"import { ApolloServer } from 'apollo-server-micro';\nimport { GraphQLDate } from 'graphql-iso-date';\nimport { asNexusMethod, makeSchema, nonNull, nullable, objectType, stringArg } from 'nexus';\nimport path from 'path';\nimport prisma from '../../lib/prisma';\nexport const GQLDate = asNexusMethod(GraphQLDate, 'date');\nconst User = objectType({\n  name: 'User',\n\n  definition(t) {\n    t.int('id');\n    t.string('name');\n    t.string('email');\n    t.list.field('posts', {\n      type: 'Post',\n      resolve: parent => prisma.user.findUnique({\n        where: {\n          id: Number(parent.id)\n        }\n      }).posts()\n    });\n  }\n\n});\nconst Post = objectType({\n  name: 'Post',\n\n  definition(t) {\n    t.int('id');\n    t.string('title');\n    t.nullable.string('content');\n    t.boolean('published');\n    t.nullable.field('author', {\n      type: 'User',\n      resolve: parent => prisma.post.findUnique({\n        where: {\n          id: Number(parent.id)\n        }\n      }).author()\n    });\n  }\n\n});\nconst Query = objectType({\n  name: 'Query',\n\n  definition(t) {\n    t.field('post', {\n      type: 'Post',\n      args: {\n        postId: nonNull(stringArg())\n      },\n      resolve: (_, args) => {\n        return prisma.post.findUnique({\n          where: {\n            id: Number(args.postId)\n          }\n        });\n      }\n    });\n    t.list.field('feed', {\n      type: 'Post',\n      resolve: (_parent, _args) => {\n        return prisma.post.findMany({\n          where: {\n            published: true\n          }\n        });\n      }\n    });\n    t.list.field('drafts', {\n      type: 'Post',\n      resolve: (_parent, _args, ctx) => {\n        return prisma.post.findMany({\n          where: {\n            published: false\n          }\n        });\n      }\n    });\n    t.list.field('filterPosts', {\n      type: 'Post',\n      args: {\n        searchString: nullable(stringArg())\n      },\n      resolve: (_, {\n        searchString\n      }, ctx) => {\n        return prisma.post.findMany({\n          where: {\n            OR: [{\n              title: {\n                contains: searchString\n              }\n            }, {\n              content: {\n                contains: searchString\n              }\n            }]\n          }\n        });\n      }\n    });\n  }\n\n});\nconst Mutation = objectType({\n  name: 'Mutation',\n\n  definition(t) {\n    t.field('signupUser', {\n      type: 'User',\n      args: {\n        name: stringArg(),\n        email: nonNull(stringArg())\n      },\n      resolve: (_, {\n        name,\n        email\n      }, ctx) => {\n        return prisma.user.create({\n          data: {\n            name,\n            email\n          }\n        });\n      }\n    });\n    t.nullable.field('deletePost', {\n      type: 'Post',\n      args: {\n        postId: stringArg()\n      },\n      resolve: (_, {\n        postId\n      }, ctx) => {\n        return prisma.post.delete({\n          where: {\n            id: Number(postId)\n          }\n        });\n      }\n    });\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: nonNull(stringArg()),\n        content: stringArg(),\n        authorEmail: stringArg()\n      },\n      resolve: (_, {\n        title,\n        content,\n        authorEmail\n      }, ctx) => {\n        return prisma.post.create({\n          data: {\n            title,\n            content,\n            published: false,\n            author: {\n              connect: {\n                email: authorEmail\n              }\n            }\n          }\n        });\n      }\n    });\n    t.nullable.field('publish', {\n      type: 'Post',\n      args: {\n        postId: stringArg()\n      },\n      resolve: (_, {\n        postId\n      }, ctx) => {\n        return prisma.post.update({\n          where: {\n            id: Number(postId)\n          },\n          data: {\n            published: true\n          }\n        });\n      }\n    });\n  }\n\n});\nexport const schema = makeSchema({\n  types: [Query, Mutation, Post, User, GQLDate],\n  outputs: {\n    typegen: path.join(process.cwd(), 'pages/api/nexus-typegen.ts'),\n    schema: path.join(process.cwd(), 'pages/api/schema.graphql')\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default new ApolloServer({\n  schema\n}).createHandler({\n  path: '/api'\n});","map":{"version":3,"sources":["/home/jordan/graphql-nextjs/pages/api/index.ts"],"names":["ApolloServer","GraphQLDate","asNexusMethod","makeSchema","nonNull","nullable","objectType","stringArg","path","prisma","GQLDate","User","name","definition","t","int","string","list","field","type","resolve","parent","user","findUnique","where","id","Number","posts","Post","boolean","post","author","Query","args","postId","_","_parent","_args","findMany","published","ctx","searchString","OR","title","contains","content","Mutation","email","create","data","delete","authorEmail","connect","update","schema","types","outputs","typegen","join","process","cwd","config","api","bodyParser","createHandler"],"mappings":"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","sourcesContent":["import { ApolloServer } from 'apollo-server-micro'\nimport { GraphQLDate } from 'graphql-iso-date'\nimport {\n  asNexusMethod,\n  makeSchema,\n  nonNull,\n  nullable,\n  objectType,\n  stringArg,\n} from 'nexus'\nimport path from 'path'\nimport prisma from '../../lib/prisma'\n\nexport const GQLDate = asNexusMethod(GraphQLDate, 'date')\n\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    t.int('id')\n    t.string('name')\n    t.string('email')\n    t.list.field('posts', {\n      type: 'Post',\n      resolve: (parent) =>\n        prisma.user\n          .findUnique({\n            where: { id: Number(parent.id) },\n          })\n          .posts(),\n    })\n  },\n})\n\nconst Post = objectType({\n  name: 'Post',\n  definition(t) {\n    t.int('id')\n    t.string('title')\n    t.nullable.string('content')\n    t.boolean('published')\n    t.nullable.field('author', {\n      type: 'User',\n      resolve: (parent) =>\n        prisma.post\n          .findUnique({\n            where: { id: Number(parent.id) },\n          })\n          .author(),\n    })\n  },\n})\n\nconst Query = objectType({\n  name: 'Query',\n  definition(t) {\n    t.field('post', {\n      type: 'Post',\n      args: {\n        postId: nonNull(stringArg()),\n      },\n      resolve: (_, args) => {\n        return prisma.post.findUnique({\n          where: { id: Number(args.postId) },\n        })\n      },\n    })\n\n    t.list.field('feed', {\n      type: 'Post',\n      resolve: (_parent, _args) => {\n        return prisma.post.findMany({\n          where: { published: true },\n        })\n      },\n    })\n\n    t.list.field('drafts', {\n      type: 'Post',\n      resolve: (_parent, _args, ctx) => {\n        return prisma.post.findMany({\n          where: { published: false },\n        })\n      },\n    })\n\n    t.list.field('filterPosts', {\n      type: 'Post',\n      args: {\n        searchString: nullable(stringArg()),\n      },\n      resolve: (_, { searchString }, ctx) => {\n        return prisma.post.findMany({\n          where: {\n            OR: [\n              { title: { contains: searchString } },\n              { content: { contains: searchString } },\n            ],\n          },\n        })\n      },\n    })\n  },\n})\n\nconst Mutation = objectType({\n  name: 'Mutation',\n  definition(t) {\n    t.field('signupUser', {\n      type: 'User',\n      args: {\n        name: stringArg(),\n        email: nonNull(stringArg()),\n      },\n      resolve: (_, { name, email }, ctx) => {\n        return prisma.user.create({\n          data: {\n            name,\n            email,\n          },\n        })\n      },\n    })\n\n    t.nullable.field('deletePost', {\n      type: 'Post',\n      args: {\n        postId: stringArg(),\n      },\n      resolve: (_, { postId }, ctx) => {\n        return prisma.post.delete({\n          where: { id: Number(postId) },\n        })\n      },\n    })\n\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: nonNull(stringArg()),\n        content: stringArg(),\n        authorEmail: stringArg(),\n      },\n      resolve: (_, { title, content, authorEmail }, ctx) => {\n        return prisma.post.create({\n          data: {\n            title,\n            content,\n            published: false,\n            author: {\n              connect: { email: authorEmail },\n            },\n          },\n        })\n      },\n    })\n\n    t.nullable.field('publish', {\n      type: 'Post',\n      args: {\n        postId: stringArg(),\n      },\n      resolve: (_, { postId }, ctx) => {\n        return prisma.post.update({\n          where: { id: Number(postId) },\n          data: { published: true },\n        })\n      },\n    })\n  },\n})\n\nexport const schema = makeSchema({\n  types: [Query, Mutation, Post, User, GQLDate],\n  outputs: {\n    typegen: path.join(process.cwd(), 'pages/api/nexus-typegen.ts'),\n    schema: path.join(process.cwd(), 'pages/api/schema.graphql'),\n  },\n})\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n}\n\nexport default new ApolloServer({ schema }).createHandler({\n  path: '/api',\n})\n"]},"metadata":{},"sourceType":"module"}