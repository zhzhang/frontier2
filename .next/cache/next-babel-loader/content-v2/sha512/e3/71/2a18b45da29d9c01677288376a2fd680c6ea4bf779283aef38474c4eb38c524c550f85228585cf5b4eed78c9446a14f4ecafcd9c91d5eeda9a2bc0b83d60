{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jordan/graphql-nextjs/apollo/client.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nlet apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsxDEV(PageComponent, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree( /*#__PURE__*/_jsxDEV(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = true;\n  const cache = new InMemoryCache().restore(initialState);\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache\n  });\n}\n\nfunction createIsomorphLink() {\n  const {\n    HttpLink\n  } = require('apollo-link-http');\n\n  return new HttpLink({\n    uri: 'http://localhost:3000/api',\n    credentials: 'same-origin'\n  });\n}","map":{"version":3,"sources":["/home/jordan/graphql-nextjs/apollo/client.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","HttpLink","require","uri","credentials"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nlet apolloClient = null\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient())\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState)\n  }\n\n  return apolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = typeof window === 'undefined'\n  const cache = new InMemoryCache().restore(initialState)\n\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache,\n  })\n}\n\nfunction createIsomorphLink() {\n  const { HttpLink } = require('apollo-link-http')\n  return new HttpLink({\n    uri: 'http://localhost:3000/api',\n    credentials: 'same-origin',\n  })\n}\n"]},"metadata":{},"sourceType":"module"}